<?php

namespace App\Http\Livewire\Auth;

use App\Models\User;
use App\Providers\RouteServiceProvider;
use Illuminate\Support\Facades\Password;
use Redbastie\Swift\Components\SwiftComponent as S;
use Redbastie\Swift\Livewire\SwiftComponent;

class PasswordReset extends SwiftComponent
{
    public $routeUri = '/password-reset/{token}/{email}';
    public $routeName = 'password.reset';
    public $routeMiddleware = 'guest';
    public $pageTitle = 'Reset Password';
    public $token, $email;

    public function mount($token, $email)
    {
        $this->token = $token;
        $this->email = $email;
    }

    public function view()
    {
        return S::div(
            S::livewire('layouts.navbar'),

            S::container(S::row(S::col(
                S::card()
                    ->header($this->pageTitle)
                    ->body(
                        S::form(
                            S::input('password')->type('password')->label('Password')->modelDefer(),
                            S::input('password_confirmation')->type('password')->label('Confirm Password')->modelDefer(),
                            S::button('Reset Password')->submit()->primary()->block()
                        )->submitPrevent('resetPassword')
                    )
            )->md(5))->justifyContentCenter())->py(4)
        );
    }

    public function resetPassword()
    {
        $validatedData = $this->validate([
            'password' => ['required', 'confirmed'],
        ]);

        $status = Password::reset([
            'token' => $this->token,
            'email' => $this->email,
            'password' => $this->model['password'],
            'password_confirmation' => $this->model['password_confirmation'],
        ], function (User $user) {
            $user->update(['password' => bcrypt($this->model['password'])]);
            auth()->login($user);
        });

        if ($status != Password::PASSWORD_RESET) {
            $this->addError('password', trans($status));
            return;
        }

        $this->redirect(RouteServiceProvider::HOME);
    }
}
